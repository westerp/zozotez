;;;; $Id$
;;;;
;;;; @encoding UTF-8
;;;; @package Zozotez http://sylwester.no/zozotez/
;;;; @author PÃ¥l Wester <pal.wester.bf@sylwester.no>
;;;;
;;;; Zozotez is free software: you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation, either version 3 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; Zozotez is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;;
;;;; print implementation (print what [specials])
;;;; Some characters are unavailable and therefore have some symbols
;;;; These will be translated to their respective char with specials
;;;; set to ANYTHING. To not use specials don't supply the extra parameter
;;;; #\Space
;;;; #\Newline
;;;; #\Tab
;;;; #\'
;;;; #\.
;;;; #\(
;;;; #\)
;;;; specials will not be implemented in the first version

;;; (print what [specials])
;;; assume that list is closed
;;;
;;; @param ^0 special chars flag
;;; @param ^1 what to print
;;; @return expression to print (unimplemented)
{zozot_print
  ^1ref(-^3ref+)
  while ^3argument+ not empty
  (-
    ^3argument &lis_open
    ^1atom(-^3type|" "(-)+) ; print out shitespace between symbols
    ^3atom(-^1+) ; copy back
    %1atom
    %2list
    ^3type = &lis_get_type
    ^4type_handler+
    switch ^3type-
    (- not number
      (- not symbol
        ( (-)^4type_handler-|"#'"(-)+)
         ^4type_handler (- list
                           if continuing ^2list(- &stack_push ) |"(" (-)
                           ^2list+ = &lis_get_cdr
                           ^5car+ = &lis_get_car
                            &lis_close
                           ^1atom(-)
                        )
      ) ^4type_handler  (- symbol
                          ^3car = &lis_get_car
                          ^3car &sym_open
                          ^3string_ref = &sym_get_string_ref
                          &sym_close
                          &lis_close
                          ^4string_ref_null+
                          while ^3string_ref is not null
                          (
                             ^4srn(- ^3in-)
                             ^3string_ref &lis_open
                             ^3car = &lis_get_car
                             ^3char . (-)
                             ^3string_ref = &lis_get_cdr
                             &lis_close
                          )
                          if ^4string_ref_null is set
                          (- |"STRING-REF-UNSET"(-))
                          ^1atom(-)+ ; set atom
                        )
    ) ^4type_handler   (- |"NUM"(-) &lis_close ) ; Number type used just to store string_ref so this will not happen yet
    if ^1atom set
    (-
      while ^2list ( ; we are in a list but dnt know if it's the end
      ^3null+
      ^2list-
      ( ; we more in this list
        &lis_open
        ^2list_flag+
        ^3type- = &lis_get_type
        if ^3type--- is not list == dotted pair
        (
          (-) |" . "(-)
          ^5cdr+ = &lis_close_addr
          ^4list_copy+ ; how to set ^2list to 1?
          ^2list_flag-
        )
        else if ^2list_flag set == normal next element
        (-
          ^5car+ = &lis_get_car
          ^4list_copy+ = &lis_get_cdr
          &lis_close
        )
      )
      if cdr is ^3null
      (-
          |")"(-)
          ^2list = &stack_pop ; if 0 or other we have positive value.
        )
      )
      if ^4list_copy (- ^2list+ ); restore
      ^3atom_copy+
    )
    ^3atom_copy(-^1+)
    if ^5new_car (- ^3copy+)
  )
   10+.(-) ; prints linefeed
   ^1atom(-)
}

;abba => abba\n
;(abba . 0 )
